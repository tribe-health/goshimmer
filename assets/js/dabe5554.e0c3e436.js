(self.webpackChunkdoc_ops=self.webpackChunkdoc_ops||[]).push([[8224],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return s},kt:function(){return h}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=p(r),h=o,f=m["".concat(l,".").concat(h)]||m[h]||u[h]||i;return r?n.createElement(f,a(a({ref:t},s),{},{components:r})):n.createElement(f,a({ref:t},s))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var p=2;p<i;p++)a[p]=r[p];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9727:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return s},default:function(){return m}});var n=r(2122),o=r(9756),i=(r(7294),r(3905)),a=["components"],c={},l="Client Lib: Interaction With Layers",p={unversionedId:"apis/api",id:"apis/api",isDocsHomePage:!1,title:"Client Lib: Interaction With Layers",description:"This guide is meant for developers familiar with the Go programming language.",source:"@site/docs/apis/api.md",sourceDirName:"apis",slug:"/apis/api",permalink:"/docs/apis/api",editUrl:"https://github.com/iotaledger/Goshimmer/tree/develop/docOps/docs/apis/api.md",version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Glossary",permalink:"/docs/protocol_specification/glossary"},next:{title:"WebAPI - clientLib",permalink:"/docs/apis/webAPI"}},s=[],u={toc:s};function m(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"client-lib-interaction-with-layers"},"Client Lib: Interaction With Layers"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"This guide is meant for developers familiar with the Go programming language.")),(0,i.kt)("p",null,"GoShimmer ships with a client Go library which communicates with the HTTP API. Please refer to the ",(0,i.kt)("a",{parentName:"p",href:"https://godoc.org/github.com/iotaledger/goshimmer/client"},"godoc.org docs")," for function/struct documentation. There is also a set of APIs which do not directly have anything to do with the different layers. Since they are so simple, simply extract their usage from the GoDocs."),(0,i.kt)("h1",{id:"use-the-api"},"Use the API"),(0,i.kt)("p",null,"Simply ",(0,i.kt)("inlineCode",{parentName:"p"},"go get")," the lib via:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"go get github.com/iotaledger/goshimmer/client\n")),(0,i.kt)("p",null,"Init the API by passing in the API URI of your GoShimmer node:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'goshimAPI := client.NewGoShimmerAPI("http://mynode:8080")\n')),(0,i.kt)("p",null,"Optionally, define your own ",(0,i.kt)("inlineCode",{parentName:"p"},"http.Client")," to use, in order for example to define custom timeouts:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'goshimAPI := client.NewGoShimmerAPI("http://mynode:8080", client.WithHTTPClient{Timeout: 30 * time.Second})\n')),(0,i.kt)("h4",{id:"a-note-about-errors"},"A note about errors"),(0,i.kt)("p",null,"The API issues HTTP calls to the defined GoShimmer node. Non 200 HTTP OK status codes will reflect themselves as ",(0,i.kt)("inlineCode",{parentName:"p"},"error")," in the returned arguments. Meaning that for example calling for attachments with a non existing/available transaction on a node, will return an ",(0,i.kt)("inlineCode",{parentName:"p"},"error")," from the respective function. (There might be exceptions to this rule)"))}m.isMDXComponent=!0}}]);